#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DocFlowDB")]
public partial class TDMSDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertTUser(TUser instance);
  partial void UpdateTUser(TUser instance);
  partial void DeleteTUser(TUser instance);
  partial void InsertTAttribute(TAttribute instance);
  partial void UpdateTAttribute(TAttribute instance);
  partial void DeleteTAttribute(TAttribute instance);
  partial void InsertTDocument(TDocument instance);
  partial void UpdateTDocument(TDocument instance);
  partial void DeleteTDocument(TDocument instance);
  partial void InsertTDocumentStatus(TDocumentStatus instance);
  partial void UpdateTDocumentStatus(TDocumentStatus instance);
  partial void DeleteTDocumentStatus(TDocumentStatus instance);
  partial void InsertTDocumentType(TDocumentType instance);
  partial void UpdateTDocumentType(TDocumentType instance);
  partial void DeleteTDocumentType(TDocumentType instance);
  partial void InsertTRole(TRole instance);
  partial void UpdateTRole(TRole instance);
  partial void DeleteTRole(TRole instance);
  #endregion
	
	public TDMSDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DocFlowDBConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public TDMSDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TDMSDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TDMSDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TDMSDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<TUser> TUsers
	{
		get
		{
			return this.GetTable<TUser>();
		}
	}
	
	public System.Data.Linq.Table<TAttribute> TAttributes
	{
		get
		{
			return this.GetTable<TAttribute>();
		}
	}
	
	public System.Data.Linq.Table<TDocument> TDocuments
	{
		get
		{
			return this.GetTable<TDocument>();
		}
	}
	
	public System.Data.Linq.Table<TDocumentStatus> TDocumentStatus
	{
		get
		{
			return this.GetTable<TDocumentStatus>();
		}
	}
	
	public System.Data.Linq.Table<TDocumentType> TDocumentTypes
	{
		get
		{
			return this.GetTable<TDocumentType>();
		}
	}
	
	public System.Data.Linq.Table<TRole> TRoles
	{
		get
		{
			return this.GetTable<TRole>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TUsers")]
public partial class TUser : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Login;
	
	private string _PasswordHash;
	
	private int _RoleID;
	
	private string _Name;
	
	private EntitySet<TDocument> _TDocuments;
	
	private EntityRef<TRole> _TRole;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public TUser()
	{
		this._TDocuments = new EntitySet<TDocument>(new Action<TDocument>(this.attach_TDocuments), new Action<TDocument>(this.detach_TDocuments));
		this._TRole = default(EntityRef<TRole>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Login
	{
		get
		{
			return this._Login;
		}
		set
		{
			if ((this._Login != value))
			{
				this.OnLoginChanging(value);
				this.SendPropertyChanging();
				this._Login = value;
				this.SendPropertyChanged("Login");
				this.OnLoginChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
	public string PasswordHash
	{
		get
		{
			return this._PasswordHash;
		}
		set
		{
			if ((this._PasswordHash != value))
			{
				this.OnPasswordHashChanging(value);
				this.SendPropertyChanging();
				this._PasswordHash = value;
				this.SendPropertyChanged("PasswordHash");
				this.OnPasswordHashChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
	public int RoleID
	{
		get
		{
			return this._RoleID;
		}
		set
		{
			if ((this._RoleID != value))
			{
				if (this._TRole.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRoleIDChanging(value);
				this.SendPropertyChanging();
				this._RoleID = value;
				this.SendPropertyChanged("RoleID");
				this.OnRoleIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TUser_TDocument", Storage="_TDocuments", ThisKey="ID", OtherKey="CreatorID")]
	public EntitySet<TDocument> TDocuments
	{
		get
		{
			return this._TDocuments;
		}
		set
		{
			this._TDocuments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TRole_TUser", Storage="_TRole", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true)]
	public TRole TRole
	{
		get
		{
			return this._TRole.Entity;
		}
		set
		{
			TRole previousValue = this._TRole.Entity;
			if (((previousValue != value) 
						|| (this._TRole.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TRole.Entity = null;
					previousValue.TUsers.Remove(this);
				}
				this._TRole.Entity = value;
				if ((value != null))
				{
					value.TUsers.Add(this);
					this._RoleID = value.ID;
				}
				else
				{
					this._RoleID = default(int);
				}
				this.SendPropertyChanged("TRole");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_TDocuments(TDocument entity)
	{
		this.SendPropertyChanging();
		entity.TUser = this;
	}
	
	private void detach_TDocuments(TDocument entity)
	{
		this.SendPropertyChanging();
		entity.TUser = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TAttributes")]
public partial class TAttribute : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _DocumentID;
	
	private string _Attribute;
	
	private string _Value;
	
	private EntityRef<TDocument> _TDocument;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnAttributeChanging(string value);
    partial void OnAttributeChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
	
	public TAttribute()
	{
		this._TDocument = default(EntityRef<TDocument>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", DbType="Int NOT NULL")]
	public int DocumentID
	{
		get
		{
			return this._DocumentID;
		}
		set
		{
			if ((this._DocumentID != value))
			{
				if (this._TDocument.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDocumentIDChanging(value);
				this.SendPropertyChanging();
				this._DocumentID = value;
				this.SendPropertyChanged("DocumentID");
				this.OnDocumentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Attribute", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Attribute
	{
		get
		{
			return this._Attribute;
		}
		set
		{
			if ((this._Attribute != value))
			{
				this.OnAttributeChanging(value);
				this.SendPropertyChanging();
				this._Attribute = value;
				this.SendPropertyChanged("Attribute");
				this.OnAttributeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Value
	{
		get
		{
			return this._Value;
		}
		set
		{
			if ((this._Value != value))
			{
				this.OnValueChanging(value);
				this.SendPropertyChanging();
				this._Value = value;
				this.SendPropertyChanged("Value");
				this.OnValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TDocument_TAttribute", Storage="_TDocument", ThisKey="DocumentID", OtherKey="ID", IsForeignKey=true)]
	public TDocument TDocument
	{
		get
		{
			return this._TDocument.Entity;
		}
		set
		{
			TDocument previousValue = this._TDocument.Entity;
			if (((previousValue != value) 
						|| (this._TDocument.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TDocument.Entity = null;
					previousValue.TAttributes.Remove(this);
				}
				this._TDocument.Entity = value;
				if ((value != null))
				{
					value.TAttributes.Add(this);
					this._DocumentID = value.ID;
				}
				else
				{
					this._DocumentID = default(int);
				}
				this.SendPropertyChanged("TDocument");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TDocuments")]
public partial class TDocument : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Label;
	
	private int _TypeID;
	
	private int _StatusID;
	
	private int _CreatorID;
	
	private System.Nullable<int> _ParentDocunentID;
	
	private System.DateTime _Created;
	
	private EntitySet<TAttribute> _TAttributes;
	
	private EntitySet<TDocument> _TDocuments;
	
	private EntityRef<TDocument> _TDocument1;
	
	private EntityRef<TUser> _TUser;
	
	private EntityRef<TDocumentStatus> _TDocumentStatus;
	
	private EntityRef<TDocumentType> _TDocumentType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnCreatorIDChanging(int value);
    partial void OnCreatorIDChanged();
    partial void OnParentDocunentIDChanging(System.Nullable<int> value);
    partial void OnParentDocunentIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    #endregion
	
	public TDocument()
	{
		this._TAttributes = new EntitySet<TAttribute>(new Action<TAttribute>(this.attach_TAttributes), new Action<TAttribute>(this.detach_TAttributes));
		this._TDocuments = new EntitySet<TDocument>(new Action<TDocument>(this.attach_TDocuments), new Action<TDocument>(this.detach_TDocuments));
		this._TDocument1 = default(EntityRef<TDocument>);
		this._TUser = default(EntityRef<TUser>);
		this._TDocumentStatus = default(EntityRef<TDocumentStatus>);
		this._TDocumentType = default(EntityRef<TDocumentType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Label", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
	public string Label
	{
		get
		{
			return this._Label;
		}
		set
		{
			if ((this._Label != value))
			{
				this.OnLabelChanging(value);
				this.SendPropertyChanging();
				this._Label = value;
				this.SendPropertyChanged("Label");
				this.OnLabelChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
	public int TypeID
	{
		get
		{
			return this._TypeID;
		}
		set
		{
			if ((this._TypeID != value))
			{
				if (this._TDocumentType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTypeIDChanging(value);
				this.SendPropertyChanging();
				this._TypeID = value;
				this.SendPropertyChanged("TypeID");
				this.OnTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL")]
	public int StatusID
	{
		get
		{
			return this._StatusID;
		}
		set
		{
			if ((this._StatusID != value))
			{
				if (this._TDocumentStatus.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStatusIDChanging(value);
				this.SendPropertyChanging();
				this._StatusID = value;
				this.SendPropertyChanged("StatusID");
				this.OnStatusIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorID", DbType="Int NOT NULL")]
	public int CreatorID
	{
		get
		{
			return this._CreatorID;
		}
		set
		{
			if ((this._CreatorID != value))
			{
				if (this._TUser.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCreatorIDChanging(value);
				this.SendPropertyChanging();
				this._CreatorID = value;
				this.SendPropertyChanged("CreatorID");
				this.OnCreatorIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentDocunentID", DbType="Int")]
	public System.Nullable<int> ParentDocunentID
	{
		get
		{
			return this._ParentDocunentID;
		}
		set
		{
			if ((this._ParentDocunentID != value))
			{
				if (this._TDocument1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnParentDocunentIDChanging(value);
				this.SendPropertyChanging();
				this._ParentDocunentID = value;
				this.SendPropertyChanged("ParentDocunentID");
				this.OnParentDocunentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TDocument_TAttribute", Storage="_TAttributes", ThisKey="ID", OtherKey="DocumentID")]
	public EntitySet<TAttribute> TAttributes
	{
		get
		{
			return this._TAttributes;
		}
		set
		{
			this._TAttributes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TDocument_TDocument", Storage="_TDocuments", ThisKey="ID", OtherKey="ParentDocunentID")]
	public EntitySet<TDocument> TDocuments
	{
		get
		{
			return this._TDocuments;
		}
		set
		{
			this._TDocuments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TDocument_TDocument", Storage="_TDocument1", ThisKey="ParentDocunentID", OtherKey="ID", IsForeignKey=true)]
	public TDocument TDocument1
	{
		get
		{
			return this._TDocument1.Entity;
		}
		set
		{
			TDocument previousValue = this._TDocument1.Entity;
			if (((previousValue != value) 
						|| (this._TDocument1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TDocument1.Entity = null;
					previousValue.TDocuments.Remove(this);
				}
				this._TDocument1.Entity = value;
				if ((value != null))
				{
					value.TDocuments.Add(this);
					this._ParentDocunentID = value.ID;
				}
				else
				{
					this._ParentDocunentID = default(Nullable<int>);
				}
				this.SendPropertyChanged("TDocument1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TUser_TDocument", Storage="_TUser", ThisKey="CreatorID", OtherKey="ID", IsForeignKey=true)]
	public TUser TUser
	{
		get
		{
			return this._TUser.Entity;
		}
		set
		{
			TUser previousValue = this._TUser.Entity;
			if (((previousValue != value) 
						|| (this._TUser.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TUser.Entity = null;
					previousValue.TDocuments.Remove(this);
				}
				this._TUser.Entity = value;
				if ((value != null))
				{
					value.TDocuments.Add(this);
					this._CreatorID = value.ID;
				}
				else
				{
					this._CreatorID = default(int);
				}
				this.SendPropertyChanged("TUser");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TDocumentStatus_TDocument", Storage="_TDocumentStatus", ThisKey="StatusID", OtherKey="ID", IsForeignKey=true)]
	public TDocumentStatus TDocumentStatus
	{
		get
		{
			return this._TDocumentStatus.Entity;
		}
		set
		{
			TDocumentStatus previousValue = this._TDocumentStatus.Entity;
			if (((previousValue != value) 
						|| (this._TDocumentStatus.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TDocumentStatus.Entity = null;
					previousValue.TDocuments.Remove(this);
				}
				this._TDocumentStatus.Entity = value;
				if ((value != null))
				{
					value.TDocuments.Add(this);
					this._StatusID = value.ID;
				}
				else
				{
					this._StatusID = default(int);
				}
				this.SendPropertyChanged("TDocumentStatus");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TDocumentType_TDocument", Storage="_TDocumentType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
	public TDocumentType TDocumentType
	{
		get
		{
			return this._TDocumentType.Entity;
		}
		set
		{
			TDocumentType previousValue = this._TDocumentType.Entity;
			if (((previousValue != value) 
						|| (this._TDocumentType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TDocumentType.Entity = null;
					previousValue.TDocuments.Remove(this);
				}
				this._TDocumentType.Entity = value;
				if ((value != null))
				{
					value.TDocuments.Add(this);
					this._TypeID = value.ID;
				}
				else
				{
					this._TypeID = default(int);
				}
				this.SendPropertyChanged("TDocumentType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_TAttributes(TAttribute entity)
	{
		this.SendPropertyChanging();
		entity.TDocument = this;
	}
	
	private void detach_TAttributes(TAttribute entity)
	{
		this.SendPropertyChanging();
		entity.TDocument = null;
	}
	
	private void attach_TDocuments(TDocument entity)
	{
		this.SendPropertyChanging();
		entity.TDocument1 = this;
	}
	
	private void detach_TDocuments(TDocument entity)
	{
		this.SendPropertyChanging();
		entity.TDocument1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TDocumentStatus")]
public partial class TDocumentStatus : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Label;
	
	private EntitySet<TDocument> _TDocuments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    #endregion
	
	public TDocumentStatus()
	{
		this._TDocuments = new EntitySet<TDocument>(new Action<TDocument>(this.attach_TDocuments), new Action<TDocument>(this.detach_TDocuments));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Label", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Label
	{
		get
		{
			return this._Label;
		}
		set
		{
			if ((this._Label != value))
			{
				this.OnLabelChanging(value);
				this.SendPropertyChanging();
				this._Label = value;
				this.SendPropertyChanged("Label");
				this.OnLabelChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TDocumentStatus_TDocument", Storage="_TDocuments", ThisKey="ID", OtherKey="StatusID")]
	public EntitySet<TDocument> TDocuments
	{
		get
		{
			return this._TDocuments;
		}
		set
		{
			this._TDocuments.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_TDocuments(TDocument entity)
	{
		this.SendPropertyChanging();
		entity.TDocumentStatus = this;
	}
	
	private void detach_TDocuments(TDocument entity)
	{
		this.SendPropertyChanging();
		entity.TDocumentStatus = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TDocumentTypes")]
public partial class TDocumentType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Label;
	
	private string _View;
	
	private EntitySet<TDocument> _TDocuments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    partial void OnViewChanging(string value);
    partial void OnViewChanged();
    #endregion
	
	public TDocumentType()
	{
		this._TDocuments = new EntitySet<TDocument>(new Action<TDocument>(this.attach_TDocuments), new Action<TDocument>(this.detach_TDocuments));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Label", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
	public string Label
	{
		get
		{
			return this._Label;
		}
		set
		{
			if ((this._Label != value))
			{
				this.OnLabelChanging(value);
				this.SendPropertyChanging();
				this._Label = value;
				this.SendPropertyChanged("Label");
				this.OnLabelChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[View]", Storage="_View", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string View
	{
		get
		{
			return this._View;
		}
		set
		{
			if ((this._View != value))
			{
				this.OnViewChanging(value);
				this.SendPropertyChanging();
				this._View = value;
				this.SendPropertyChanged("View");
				this.OnViewChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TDocumentType_TDocument", Storage="_TDocuments", ThisKey="ID", OtherKey="TypeID")]
	public EntitySet<TDocument> TDocuments
	{
		get
		{
			return this._TDocuments;
		}
		set
		{
			this._TDocuments.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_TDocuments(TDocument entity)
	{
		this.SendPropertyChanging();
		entity.TDocumentType = this;
	}
	
	private void detach_TDocuments(TDocument entity)
	{
		this.SendPropertyChanging();
		entity.TDocumentType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TRoles")]
public partial class TRole : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Label;
	
	private int _DefaultDocumentType;
	
	private EntitySet<TUser> _TUsers;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    partial void OnDefaultDocumentTypeChanging(int value);
    partial void OnDefaultDocumentTypeChanged();
    #endregion
	
	public TRole()
	{
		this._TUsers = new EntitySet<TUser>(new Action<TUser>(this.attach_TUsers), new Action<TUser>(this.detach_TUsers));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Label", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
	public string Label
	{
		get
		{
			return this._Label;
		}
		set
		{
			if ((this._Label != value))
			{
				this.OnLabelChanging(value);
				this.SendPropertyChanging();
				this._Label = value;
				this.SendPropertyChanged("Label");
				this.OnLabelChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultDocumentType", DbType="Int NOT NULL")]
	public int DefaultDocumentType
	{
		get
		{
			return this._DefaultDocumentType;
		}
		set
		{
			if ((this._DefaultDocumentType != value))
			{
				this.OnDefaultDocumentTypeChanging(value);
				this.SendPropertyChanging();
				this._DefaultDocumentType = value;
				this.SendPropertyChanged("DefaultDocumentType");
				this.OnDefaultDocumentTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TRole_TUser", Storage="_TUsers", ThisKey="ID", OtherKey="RoleID")]
	public EntitySet<TUser> TUsers
	{
		get
		{
			return this._TUsers;
		}
		set
		{
			this._TUsers.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_TUsers(TUser entity)
	{
		this.SendPropertyChanging();
		entity.TRole = this;
	}
	
	private void detach_TUsers(TUser entity)
	{
		this.SendPropertyChanging();
		entity.TRole = null;
	}
}
#pragma warning restore 1591
